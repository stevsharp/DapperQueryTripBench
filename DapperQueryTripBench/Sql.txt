-- Drop if exists
DROP TABLE IF EXISTS Payments;
DROP TABLE IF EXISTS ShippingDetails;
DROP TABLE IF EXISTS OrderItems;
DROP TABLE IF EXISTS Orders;
GO

-- Orders table
CREATE TABLE Orders (
    OrderId INT IDENTITY PRIMARY KEY,
    OrderDate DATETIME2 NOT NULL,
    CustomerName NVARCHAR(100) NOT NULL
);

-- OrderItems table
CREATE TABLE OrderItems (
    OrderItemId INT IDENTITY PRIMARY KEY,
    OrderId INT NOT NULL,
    ProductName NVARCHAR(100) NOT NULL,
    Quantity INT NOT NULL,
    UnitPrice DECIMAL(10,2) NOT NULL,
    FOREIGN KEY (OrderId) REFERENCES Orders(OrderId)
);

-- ShippingDetails table
CREATE TABLE ShippingDetails (
    ShippingId INT IDENTITY PRIMARY KEY,
    OrderId INT NOT NULL,
    Address NVARCHAR(200) NOT NULL,
    City NVARCHAR(50) NOT NULL,
    PostalCode NVARCHAR(20) NOT NULL,
    Country NVARCHAR(50) NOT NULL,
    FOREIGN KEY (OrderId) REFERENCES Orders(OrderId)
);

-- Payments table
CREATE TABLE Payments (
    PaymentId INT IDENTITY PRIMARY KEY,
    OrderId INT NOT NULL,
    PaymentDate DATETIME2 NOT NULL,
    Amount DECIMAL(10,2) NOT NULL,
    PaymentMethod NVARCHAR(50) NOT NULL,
    FOREIGN KEY (OrderId) REFERENCES Orders(OrderId)
);

-- Seed fake data
SET NOCOUNT ON;
DECLARE @i INT = 1;
WHILE @i <= 10000
BEGIN
    INSERT INTO Orders (OrderDate, CustomerName)
    VALUES (DATEADD(DAY, -@i % 365, GETDATE()), CONCAT('Customer ', @i));

    DECLARE @orderId INT = SCOPE_IDENTITY();

    -- OrderItems (1-5 per order)
    DECLARE @j INT = 1;
    WHILE @j <= 3 + (@i % 3)
    BEGIN
        INSERT INTO OrderItems (OrderId, ProductName, Quantity, UnitPrice)
        VALUES (@orderId, CONCAT('Product ', @j), ABS(CHECKSUM(NEWID()) % 5) + 1, (ABS(CHECKSUM(NEWID()) % 100) + 1));
        SET @j += 1;
    END

    -- ShippingDetails (1 per order)
    INSERT INTO ShippingDetails (OrderId, Address, City, PostalCode, Country)
    VALUES (@orderId, CONCAT('Address ', @i), 'CityX', '12345', 'CountryY');

    -- Payments (1-2 per order)
    DECLARE @k INT = 1;
    WHILE @k <= 1 + (@i % 2)
    BEGIN
        INSERT INTO Payments (OrderId, PaymentDate, Amount, PaymentMethod)
        VALUES (@orderId, DATEADD(DAY, -@k, GETDATE()), (ABS(CHECKSUM(NEWID()) % 200) + 20), 'Credit Card');
        SET @k += 1;
    END

    SET @i += 1;
END


SELECT COUNT(*) FROM Payments
SELECT COUNT(*) FROM ShippingDetails
SELECT COUNT(*) FROM OrderItems
SELECT COUNT(*) FROM Orders